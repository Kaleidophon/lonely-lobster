buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  itinerary               ; List of next stations to visit
  target-stop             ; Next stop the bus is driving towards
  called-reinforcements?  ; Flag indicating whether this bus has already called a new bus
  initialized?            ; Flag indicating whether this bus has been initialized yet
  ratio                   ; Ratio of buses to waiting passengers
  ticks-since-init        ; Records the ticks since the bus has been initialized
]

globals [graph]

to init-buses
  ; Initialize your agents here.
  add-bus 3
  set itinerary generate-schedule
  pick-destination
  set called-reinforcements? false
  set initialized? true
  set ticks-since-init 0

  ; send-message bus_id dict  TODO: why this ?

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  ; 0: Amstel, 1: Amstelveenseweg, 2: Buikslotermeer, 3: Centraal, 4: Dam
  ; 5: Evertsenstraat, 6: Floradorp, 7: Haarlemmermeerstation, 8: Hasseltweg, 9: Hendrikkade,
  ; 10: Leidseplein, 11: Lelylaan, 12: Muiderpoort, 13: Museumplein, 14: RAI, 15: SciencePark, 16: Sloterdijk,
  ; 17: Surinameplein, 18: UvA, 19: VU, 20: Waterlooplein, 21: Weesperplein, 22: Wibautstraat, 23: Zuid

  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.

  ; Check if a new bus should be used
  call-in-reinforcements
  set ticks-since-init ticks-since-init + 1

  ; Check if itinerary is finished, if yes recreate it
  if length itinerary = 0
  [
    set itinerary generate-schedule
  ]

  ifelse current_stop = target-stop
  ; Bus is at a station
  [
    drop-off-at-station
    pick-up-at-station
    pick-destination
  ]
  ; Bus is still on the road
  [
    ; TODO: how to travel-to ? and does this moving to the destination happen in one time step
    travel-to target-stop
  ]
end

;; CUSTOM FUNCTIONS

to drop-off-at-station
  ;; Drop off all the passengers at station in case it's their destination.
  foreach bus_passengers
  [
    if item 1 ? = current_stop
    [
      drop-off-passenger item 0 ?
    ]
  ]
end

to pick-up-at-station
  ;; Pick up all the passenger at a bus stop.
  foreach get-passengers-at-stop current_stop
  [
    if not bus-full?
    [
      ; TODO: how to pick-up-passenger ?
      pick-up-passenger item 0 ?
    ]
  ]
end

to call-in-reinforcements
  ;; Call for a new bus in case the current fleet cannot handle all the passengers (only the last bus added can call for a new bus)
  set ratio get-waiting-passengers / count buses

  ; TODO: understand the constants used for ratio and ticks-since-init
  if not called-reinforcements? and ratio > 50 and ticks-since-init > 30
  [
    let new-bus-type determine-new-bus-type
    add-bus new-bus-type
    set called-reinforcements? true

    ; Init a new bus
    ask buses with [ current_stop = 3 and not initialized? ] [
      set itinerary generate-schedule
      pick-destination
      set called-reinforcements? false
      set ticks-since-init 0
    ]
  ]
end

to-report generate-schedule
  ;; Generate a boring planned out bus schedule that a vehicle follows relentlessly.
  ;; (Assuming that Centraal is a hub where people want to go more often than to other stations)
  let schedule [
    3 9 8 6 8 2 8 9 3 ; Amsterdam Noord
    9 20 12 15 18 15 0 22 21 20 3 ; Amsterdam Oost / Zuid-Oost
    4 10 13 23 14 23 19 1 7 17 11 16 5 4 3 ;; Amsterdam Zuid / West
  ]

  report schedule
end

to pick-destination
  ;; Pick the next destination of the bus
  set target-stop item 0 itinerary
  set itinerary remove-item 0 itinerary
end

to-report get-waiting-passengers
  ;; Count the total number of passengers waiting at all stations
  let waiting-passengers 0
  let bus-stop 0

  while [ bus-stop != 23 ]
  [
    ; TODO: how to get-passengers-at-stop ?
    set waiting-passengers waiting-passengers + length get-passengers-at-stop bus-stop
    set bus-stop bus-stop + 1
  ]

  report waiting-passengers
end

to-report determine-new-bus-type
  if ratio >= 500
  [
    print ratio
    print "Get a big bus"
    report 3
  ]

  ifelse ratio > 100 and ratio < 500
  [
    print ratio
    print "Get a medium bus"
    report 2
  ]
  [
    print ratio
    print "Get a small bus"
    report 1
  ]
end

to-report bus-full?
  ;; Check whether the buses' capacity has been reached yet.
  if bus_type = 1
  [
    report length bus_passengers = 12
  ]

  if bus_type = 2
  [
    report length bus_passengers = 60
  ]

  if bus_type = 3
  [
    report length bus_passengers = 150
  ]
end
