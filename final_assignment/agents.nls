__includes [ "messaging.nls" "routing.nls" "voting.nls" ]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  itinerary               ; List of next stations to visit
  target-stop             ; Next stop the bus is driving towards
  initialized?            ; Flag indicating whether this bus has been initialized yet
  ratio                   ; Ratio of buses to waiting passengers
  ticks-since-init        ; Records the ticks since the bus has been initialized
  ticks-since-vote        ; Ticks since last vote about new bus
  vote-in-progress?       ; Duh
  received-votes          ; Votes received from other buses
  voting-duration         ; Duration of the current vote in ticks
  path-destination        ; Records the shortest path to the destination
  blacklisted-stops       ; Records the stops it isn't supposed to use as destination
  capacity                ; Total capacity of bus
  pending-contracts       ; table of open / pending requests to other buses
  assigned-contracts      ; table of requests received by other buses
  reactions               ; List of tasks of function that are used to react to an incoming request by another bus
  known-buses             ; List of other known buses
  disappointments         ; Number of passengers that couldn't be picked up at the last few stops
]

extensions [table]
globals [graph]

to init-buses
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  ; 0: Amstel, 1: Amstelveenseweg, 2: Buikslotermeer, 3: Centraal, 4: Dam
  ; 5: Evertsenstraat, 6: Floradorp, 7: Haarlemmermeerstation, 8: Hasseltweg, 9: Hendrikkade,
  ; 10: Leidseplein, 11: Lelylaan, 12: Muiderpoort, 13: Museumplein, 14: RAI, 15: SciencePark, 16: Sloterdijk,
  ; 17: Surinameplein, 18: UvA, 19: VU, 20: Waterlooplein, 21: Weesperplein, 22: Wibautstraat, 23: Zuid

  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]

  set known-buses []
  set blacklisted-stops []
  set pending-contracts table:make
  set assigned-contracts table:make
  ; XXX: Add new reaction to requests as tasks here
  set reactions (list (task remember-id) (task add-to-blacklist) (task remove-from-blacklist) (task cast-vote))
  ; Infrom other buses in the city that you have been created
  tell-buses-id
  set ticks-since-vote 0
  set initialized? true
  set vote-in-progress? false
  set voting-duration 0
  set ticks-since-init 0
  set received-votes []
  set disappointments []
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.

  ; Check if a new bus should be used
  ; If a certain event is triggered, the "mediator" bus starts a vote among the buses
  if bus_id = 24
  [
     ;show (word "Call vote " call-vote? " | In Progress " vote-in-progress? " | Finished " voting-finished? " | Received " length received-votes " | Known " length known-buses)
     ;show inbox
     if call-vote? and not vote-in-progress?
     [
       show "Initating a vote"
       gather-votes
       set vote-in-progress? true
     ]
     
     ifelse vote-in-progress?
     [
       ; Also stop vote if it takes too long (-> "disappearing votes bug")
       ifelse voting-finished? or voting-duration > 5
       [
         show "Voting finished, analyze results"
         let voting-result analyze-votes-preference
         
         show (word "Result of vote was " voting-result)
         if voting-result > 0
         [
           order-bus voting-result
         ]
         set received-votes []
         set vote-in-progress? false
         set ticks-since-vote 0
       ]
       [
         set voting-duration voting-duration + 1
       ]
     ]
     [
       set ticks-since-vote ticks-since-vote + 1
     ]
  ]
  
  ; Update the ticks since the bus was initialized
  set ticks-since-init ticks-since-init + 1

  ; Message management
  process-inbox
  answer-questions

  ; Check if the bus is just initialized
  ifelse ticks-since-init = 1
  [
      pick-destination ; Pick the initial destination
      tell-going-to known-buses ; Tell other buses your destination
      ;show (word "Destination: " target-stop)
      set itinerary get-path-destination ; Update itinerary with the shortest path to buses destination
      ;show (word "New Itinerary: " itinerary)
      pick-up-at-station ; Pick up passengers with destination as one of the stops in the itinerary
  ]
  [
    ifelse current_stop = target-stop
    ; Bus is at a station
    [
      ;show (word " Reached destination " current_stop)
      drop-off-at-station ; Drop off remaining passengers in the bus since it should be the last stop in the itinerary
      tell-reached ; Tell other buses that you have reached your destination and they can remove that stop from blacklist
      pick-destination ; Pick new destination
      tell-going-to known-buses ; Tell others your destination
      ; show (word "Destination: " target-stop)
      set itinerary get-path-destination
      ;show (word "New Itinerary: " itinerary)
      pick-up-at-station ; Pick up passengers with destination as one of the stops in the itinerary
    ]
    ; Bus is still on the road
    [
      ; show (word "Still on road at " current_stop)
      ; show (word "Next-stop " next_stop)
      ifelse current_stop = -1
      [
        travel-to next_stop
      ]
      [
        ; show (word "Still on road at " current_stop)
        drop-off-at-station ; Drop off people with intermediate stops as their destination
        pick-up-at-station ; Pick up passengers with destination as one of the stops in the itinerary
        let got-to-stop item 0 itinerary ; Initialize next intermediate stop
        set itinerary remove-item 0 itinerary ; Remove it from the itinerary
        ; show (word "Go-to-stop " got-to-stop)
        travel-to got-to-stop ; Initiate the travel
      ]
    ]
  ]
end

;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;;                             PASSENGER MANAGEMENT
;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

to drop-off-at-station
  ;; Drop off all the passengers at station in case it's their destination.
  foreach bus_passengers
  [
    if item 1 ? = current_stop
    [
      drop-off-passenger item 0 ?
    ]
  ]
end

to pick-up-at-station
  ;; Pick up all the passengers whose destination is in the itinerary
  let current-disappointments 0  ; Number of passengers that couldn't be picked up at the current station
  
  foreach itinerary
  [
    let stop-i ?

    foreach get-passengers-at-stop current_stop
    [
      if item 1 ? = stop-i
      [
        ifelse not bus-full?
        [
          pick-up-passenger item 0 ?
        ]
        [
          set current-disappointments current-disappointments + 1
        ]
      ]
    ]
  ]
  
  set disappointments lput current-disappointments disappointments
end

to-report get-passenger-destinations
  ;; Return the destinations of all passengers as a list
  let destinations []

  foreach bus_passengers
  [
    set destinations fput item 1 ? destinations
  ]

  report destinations
end

;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;;                                   BUS LOGIC
;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

to pick-destination

  ;show (word "Blacklist " blacklisted-stops)

  let most-requested-tuple get-most-requested-stop
  let max-waiting-stop-tuple []
  let max-waiting-stop get-max-waiting-stop
  set max-waiting-stop-tuple fput max-waiting-stop max-waiting-stop-tuple
  set max-waiting-stop-tuple lput length get-passengers-at-stop max-waiting-stop max-waiting-stop-tuple

  ; Choose the max of "most requested destination at the stop" and "stop with the most waiting people"
  ifelse item 1 most-requested-tuple > item 1 max-waiting-stop-tuple
  [
      set target-stop item 0 most-requested-tuple
  ]
  [
      set target-stop item 0 max-waiting-stop-tuple
  ]
end

to-report get-waiting-passengers
  ;; Count the total number of passengers waiting at all stations
  let waiting-passengers 0
  let bus-stop 0

  while [ bus-stop != 23 ]
  [
    set waiting-passengers waiting-passengers + length get-passengers-at-stop bus-stop
    set bus-stop bus-stop + 1
  ]

  report waiting-passengers
end

to-report bus-full?
  ;; Check whether the buses' capacity has been reached yet.
  report length bus_passengers = get-capacity
end

to-report get-capacity
  ;; Return the passenger capacity of the current bus
  if bus_type = 1
  [
    report 12
  ]

  if bus_type = 2
  [
    report 60
  ]

  if bus_type = 3
  [
    report 150
  ]
end

to-report determine-new-bus-type
  if ratio >= 500
  [
    report 3
  ]

  ifelse ratio > 100 and ratio < 500
  [
    report 2
  ]
  [
    report 1
  ]
end

to-report get-max-waiting-stop
  ;; Return out of all stops except the current stop and blacklisted stop, the stop with the max people waiting
  let max-waiting-stop 3
  let max-waiting-passengers -1
  let bus-stop 0
  let candidate-destination []

  while [bus-stop != 23]
  [
    set candidate-destination fput bus-stop candidate-destination
    set bus-stop bus-stop + 1
  ]

  foreach blacklisted-stops
  [
    set candidate-destination remove ? candidate-destination
  ]

  foreach candidate-destination
  [
    let waiting-passengers length get-passengers-at-stop ?
    if max-waiting-passengers < waiting-passengers and ? != current_stop
    [
      set max-waiting-stop ?
      set max-waiting-passengers waiting-passengers
    ]
  ]

  report max-waiting-stop
end

to-report get-most-requested-stop
  ;; Return the most requested destination stop at the current stop
  let passenger-at-stop get-passengers-at-stop current_stop
  let destination-counter table:make
  let bus-stop-i 0
  let max-passenger-stop 0
  let max-passenger-stop-count -1

  while [bus-stop-i <= 23]
  [
    table:put destination-counter bus-stop-i 0
    set bus-stop-i bus-stop-i + 1
  ]

  foreach passenger-at-stop
  [
    let destination-passengers table:get destination-counter item 1 ?
    table:put destination-counter item 1 ? destination-passengers + 1
  ]

  foreach blacklisted-stops
  [
    if table:has-key? destination-counter ?
    [
      table:remove destination-counter ?
    ]
  ]

  if table:has-key? destination-counter current_stop
  [
    table:remove destination-counter current_stop
  ]

  foreach table:to-list destination-counter
  [
    if item 1 ? > max-passenger-stop-count
    [
      set max-passenger-stop-count item 1 ?
      set max-passenger-stop item 0 ?
    ]
  ]

  let max-passenger-stop-tuple []
  set max-passenger-stop-tuple fput max-passenger-stop max-passenger-stop-tuple
  set max-passenger-stop-tuple lput max-passenger-stop-count max-passenger-stop-tuple

  report max-passenger-stop-tuple
end