to-report determine-unserved-passengers
  let thres 60 


  let unserved_passengers []
  let bus_stop 0

  while [ bus_stop != 23 ]
  [
    foreach get-passengers-at-stop bus_stop
    [
      let p_id item 0 ?
      let waiting_time item 4 (item p_id passengers)
      if waiting_time > thres
      [
        set unserved_passengers lput (list p_id waiting_time bus_stop) unserved_passengers
      ]
    ]
    set bus_stop bus_stop + 1
  ]

  report unserved_passengers

end

;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;;                                    negotiatING
;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


to-report call-negotiate?
  ;; Initiate a negotiate about a new bus in case the current fleet cannot handle all the passengers (only the last bus added can call for a new bus)
  let unserved_passengers determine-unserved-passengers

  ;report ratio > 50 and ticks-since-negotiate > 45
  let unserved_ratio (length unserved_passengers) / amount_passengers_waiting
  let negotiate? length unserved_passengers > 300 and ticks-since-negotiate > 200
  report negotiate?
end

to-report negotiating-finished?
  ;; Check whether all the negotiates of the current negotiating have been cast
  report length known-buses = length received-negotiates
end


to gather-negotiates
  ;; Send two-way contracts to other buses asking for their negotiates
  let action "ASK-NEGOTIATE"
  let content 0

  foreach known-buses
  [
     send-message-with-contract ? action content (task add-negotiate)
  ]
end

to-report add-negotiate [ response ]
  ;; Add a cast negotiate to the "ballot box"
  let negotiate table:get response "content"
  let sender table:get response "sender"

  ;show (word "Received negotiate " negotiate " from " sender)

  ; STORE BUS ID AND NEGOTIATE (UTILITY/LOCAL CROWDEDNESS) IN RECEIVED-NEGOTIATES
  set received-negotiates fput (list sender negotiate) received-negotiates
  report true
end

to-report cast-negotiate [ request ]
  ;; Cast negotiate on whether to demand a new bus based on current utilization
  let action table:get request "action"

  if action = "ASK-NEGOTIATE"
  [
     let sender-id table:get request "sender"
     let contract-id table:get request "contract-id"

     ; Don't negotiate when you're already a special bus
     if not special-bus?
     [
       ;     let negotiate negotiate-with-crowdedness
       let negotiate negotiate-with-utilization
       
       let response negotiate
       ;show (word "negotiating for " negotiate)
       let message create-message contract-id table:get request "contract-from" table:get request "contract-to" sender-id action response
       send-message sender-id message
     ]
     report fulfill-assigned-contract contract-id
  ]

  report false
end

to-report negotiate-with-utilization
  ;; Cast your negotiate based on the current utilization of the vehicle
  let utilization get-utilization
  report utilization
end

to-report negotiate-with-crowdedness
  ;; Cast your negotiate based on the crowdedness by station in your neighborhood
  let reference-stop -1
  ifelse current_stop = -1
  [
    set reference-stop target-stop
  ]
  [
    set reference-stop current_stop
  ]

  let passengers-waiting length get-passengers-at-stop reference-stop
  let neighboring-stations item reference-stop graph

  foreach neighboring-stations
  [
    set passengers-waiting passengers-waiting + length get-passengers-at-stop ?
  ]

  let average-passengers-waiting passengers-waiting / (length neighboring-stations + 1)


  report average-passengers-waiting
end

to-report analyze-negotiate-preference
  ;; Analyze the negotiates and make a decision based on konsensus

  show (word "Negotiates: " received-negotiates)

  ; if length received-votes = 0
  ; [
  ;    report 1
  ; ]

  let min_negotiate 99999999
  let assigned_bus_id -1

  ; Count votes
  foreach received-negotiates
  [
    let negotiate_bus_id item 0 ?
    let negotiate item 1 ?
    if negotiate < min_negotiate
    [
      set assigned_bus_id negotiate_bus_id
      set min_negotiate negotiate
    ]
  ]

  report assigned_bus_id
end


to-report set-special-bus [ response ]
  ;; Set a bus as special bus
  let assigned_bus_id table:get response "content"
  let action table:get response "action"
  let contract-id table:get response "contract-id"

  if action = "ASK-SPECIAL-BUS"
  [
    if bus_id = assigned_bus_id
    [
      show (word "Setting bus " bus_id " as special bus")
      set special-bus? true
      set ticks-since-special-bus 0
      report fulfill-assigned-contract contract-id
    ]
  ]
  report false
end

to assign-special-bus [ assigned-bus-id ]
  ;; Send contracts to buses to assign special bus
  let action "ASK-SPECIAL-BUS"
  let content assigned-bus-id

  foreach known-buses
  [
    send-message-with-oneway-contract ? action content
  ]
end

to show-special-buses
;  show "-------------------SPECIAL BUSES-------------------------"
  ask buses [if special-bus? [show word "Special bus " bus_id ]]
end 
    
to do-negotiation
       if call-negotiate? and not negotiate-in-progress?
     [
       show "Initating a negotiate"
       gather-negotiates
       set negotiate-in-progress? true
     ]

     ifelse negotiate-in-progress?
     [
       ; Also stop negotiate if it takes too long (-> "disappearing negotiates bug")
       ifelse negotiating-finished? or negotiating-duration > 5
       [
         show "negotiating finished, analyze results"
         let negotiating-result analyze-negotiate-preference

         show (word "Result of negotiation: bus " negotiating-result)

         ;;;;;;;;;;TODO
         let special-bus-id negotiating-result
         assign-special-bus special-bus-id
         

         set received-negotiates []
         
         ;; DON'T LET MEDIATOR BUS NEGOTIATE (CANNOT BE SPECIAL BUS)
         ;set received-negotiates lput (list bus_id negotiate-with-utilization) received-negotiates ; Let the mediator bus negotiate too
         
         set negotiate-in-progress? false
         set ticks-since-negotiate 0
       ]
       [
         set negotiating-duration negotiating-duration + 1
       ]
     ]
     [
       set ticks-since-negotiate ticks-since-negotiate + 1
     ]
end
