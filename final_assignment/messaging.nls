;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;;                                   MESSAGING
;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

;; The messaging with contracts logic works the following way
;; First of all, a bus goes through its mailbox, looking for reponses to contracts it assigned to other buses
;; or contracts is has been assigned to by other buses (process-inbox).
;; If there are any, it tries to process them accordingly (answer-questions), which can happen in to cases:
;;   a) It is a notification that the contract is has assigned to another bus has been fulfilled. The corresponding
;;      pending contract we be marked as fulfilled.
;;   b) It is a contract assigned by another bus: Add it to the list of assigned-contracts and try to process it immediately.
;;      These ways to process a possible request should be functions added to the <reaction> variable of each bus.
;;
;; Afterwards, the bus gets "curious" itself and asks other buses questions (ask-questions).
;; The conditions for these questions should be defined in the question function itself to keep the code more readable.
;; In case the bus asks a question, a pending contract is created and added to pending-contracts. The message is sent
;; to the bus in question, containing the act ("ASK", "DO", ...), the id of the ID and the receiver and the sender
;; and the ID of the bus the contract originated from and the bus it was assigned to (because that will be the other
;; way around once a contract is send back to its original contractor). Once the target bus has received the message with the
;; contract, it performs the steps described above.

to process-inbox
  ;; Process inbox, generate new assigned contracts for every contract received by another bus
  while [ length inbox > 0 ]
  [
    let current-mail item 0 inbox
    set inbox remove-item 0 inbox
    set current-mail item 2 current-mail ; If you send a message, it gets wrapped in another list
    let contract-id table:get current-mail "contract-id"
    let contract-to table:get current-mail "contract-to"

    let res fulfill-pending-contract contract-id current-mail

    ; If the current contract hasn't been a response by another bus, it is a contract assignt TO this bus
    ; So add it as a assigned contract
    if not res and contract-to = bus_id
    [
      add-assigned-contract contract-id current-mail
    ]
  ]
end

to answer-questions
  ;; Answer requests by other buses
  ;; Put all the logic a bus uses to react to a certain request here
  foreach table:keys assigned-contracts
  [
    ;; Perform reactions to a message
    let reacted? false
    let reaction-index 0

    while [ not reacted? and reaction-index < length reactions ]
    [
      let current-reaction item reaction-index reactions
      let current-contract table:get assigned-contracts ?
      set reacted? (runresult current-reaction current-contract)

      set reaction-index reaction-index + 1
    ]
  ]

end

to tell-buses-id
  ;; Have a bus introduce itself after its creation

  let action "TELL-ID"
  let content bus_id

  let bus-index 24

  ; Send message to all other buses
  while [ bus-index < bus_id ]
  [
    send-message-with-oneway-contract bus-index action content
    set known-buses fput bus-index known-buses
    set bus-index bus-index + 1
  ]
end

to-report update [ response ]
  ;; Verify that the handshake has been successful.
  ;; TODO: This is just to test the messaging logic. Remove later.

  let sender table:get response "sender"
  let content table:get response "content"

  show (word "Bus " sender " says: " content)
  report true
end

to tell-going-to [other-buses]
  ;; Have a bus introduce itself after its creation
  let action "TELL-GOING-TO"
  let content target-stop

  ; Send message to all other buses
  foreach other-buses
  [
    send-message-with-oneway-contract ? action content
  ]
end

to tell-reached
  ;; Have a bus introduce itself after its creation
  let action "TELL-REACHED"
  let content current_stop

  ; Send message to all other buses
  foreach known-buses
  [
    send-message-with-oneway-contract ? action content
  ]
end

to-report remember-id [ request ]
  let sender-action table:get request "action"

  if sender-action = "TELL-ID"
  [
    let sender-id table:get request "sender"
    let contract-id table:get request "contract-id"

    ; Remember id
    let new-bus-id table:get request "content"
    set known-buses fput new-bus-id known-buses

    let sender-list []
    set sender-list fput sender-id sender-list
    tell-going-to sender-list

    report fulfill-assigned-contract contract-id
  ]

  report false
end

to-report add-to-blacklist [ request ]
  let sender-action table:get request "action"

  if sender-action = "TELL-GOING-TO"
  [
    let sender-id table:get request "sender"
    let contract-id table:get request "contract-id"

    ; Add the sender destination to the blacklist
    let sender-destination table:get request "content"
    set blacklisted-stops fput sender-destination blacklisted-stops

    report fulfill-assigned-contract contract-id
  ]

  report false
end

to-report remove-from-blacklist [ request ]
  let sender-action table:get request "action"

  if sender-action = "TELL-REACHED"
  [
    let sender-id table:get request "sender"
    let contract-id table:get request "contract-id"

    ; Remove the sender current_stop from the blacklist
    let sender-current-stop table:get request "content"
    set blacklisted-stops remove sender-current-stop blacklisted-stops

    report fulfill-assigned-contract contract-id
  ]

  report false
end

to-report message-test-callback [ response ]
  ;; Verify that the handshake has been successful.
  ;; TODO: This is just to test the messaging logic. Remove later.

  let sender table:get response "sender"
  let content table:get response "content"

  show (word "Bus " sender " says: " content)
  report true
end

to send-message-with-contract [ receiver action content callback ]
  ;; Send a message to another bus and create a contract.
  ;; The contract is deemd fulfilled once the bus receives a response from the addressed bus.
  let contract-id generate-contract-id
  let message create-message contract-id bus_id receiver receiver action content

  add-pending-contract contract-id callback
  send-message receiver message
end

to send-message-with-oneway-contract [ receiver action content ]
  ;; Send a message to another bus and create a contract.
  ;; The contract is not stored by the sending bus.
  let contract-id generate-contract-id
  let message create-message contract-id bus_id receiver receiver action content
  send-message receiver message
end

to add-pending-contract [ contract-id callback ]
  ;; Add a new contract to the table of pending contracts
  table:put pending-contracts contract-id callback
  ;show (word "Generated new pending contract " contract-id)
end

to-report fulfill-pending-contract [ contract-id response ]
  ;; Fulfill an existing contract and execute the callback function
  carefully [
    let callback table:get pending-contracts contract-id
    table:remove pending-contracts contract-id ; Remove contract; it has been fulfilled
    ;show (word "Fulfilling pending contract " contract-id)
    report (runresult callback response) ; Feed the response of another bus into the contract callback
  ]
  [
    report false
  ]
end

to add-assigned-contract [ contract-id request ]
  ;; Add a new contract to the table of contracts assigned to this bus
  table:put assigned-contracts contract-id request
  ;show (word "Received assigned contract " contract-id)
end

to-report fulfill-assigned-contract [ contract-id ]
  ;; Fulfill a contract that has been assigned to this bus by another bus
  let fulfilled? false
  carefully [
    table:remove assigned-contracts contract-id ; Remove contract; it has been fulfilled
    ;show (word "Fulfilling assigned contract " contract-id)
    set fulfilled? true
  ]
  []

  report fulfilled?
end

to-report create-message [ contract-id contract-from contract-to receiver action content ]
  ;; Compose a full message out of its path
  let message table:make

  table:put message "contract-id" contract-id
  table:put message "contract-from" contract-from
  table:put message "contract-to" contract-to
  table:put message "receiver" receiver
  table:put message "sender" bus_id
  table:put message "action" action
  table:put message "content" content

  report message
end

to-report compile-info
  ;; Compile information about the current bus in order to exchange it with other buses
  let info table:make

  table:put info "bus-id" bus_id
  table:put info "target" target-stop
  table:put info "num-passengers" length bus_passengers
  table:put info "total-capacity" get-capacity
  table:put info "capacity-left" get-capacity - length bus_passengers
  table:put info "itinerary" itinerary
  table:put info "destinations" get-passenger-destinations

  report info
end

to-report generate-contract-id
  ;; Generate a (hopefully) unique id for a contract
  let contract-id (word bus_id ":" word ticks-since-init ":" random 100)
  report contract-id
end
