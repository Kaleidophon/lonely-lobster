;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;;                                    VOTING
;;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


to-report call-vote?
  ;; Initiate a vote about a new bus in case the current fleet cannot handle all the passengers (only the last bus added can call for a new bus)
  set ratio get-waiting-passengers / count buses

  ;report ratio > 50 and ticks-since-vote > 45
  report ticks-since-vote > 45
end

to-report voting-finished?
  ;; Check whether all the votes of the current voting have been cast
  report length known-buses = length received-votes
end

to gather-votes
  ;; Send two-way contracts to other buses asking for their votes
  let action "ASK-VOTE"
  let content 0
  
  foreach known-buses 
  [
     send-message-with-contract ? action content (task add-vote)
  ]
end

to-report add-vote [ response ]
  ;; Add a cast vote to the "ballot box"
  let vote table:get response "content"
  let sender table:get response "sender"
  
  ;show (word "Received vote " vote " from " sender)
  
  set received-votes fput vote received-votes
  report true
end

to-report cast-vote [ request ]
  ;; Cast vote on whether to demand a new bus based on current utilization
  let action table:get request "action"
  
  if action = "ASK-VOTE"
  [
     let sender-id table:get request "sender"
     let contract-id table:get request "contract-id"
     let utilization get-utilization
     let vote 0
     
     if utilization > 0.5
     [
        set vote 1
     ]
     
     if utilization > 0.75
     [
        set vote 2
     ]
     
     if utilization > 0.9
     [
        set vote 3
     ]
     
     let response vote
     ;show (word "Voting for " vote)
     let message create-message contract-id table:get request "contract-from" table:get request "contract-to" sender-id action response
     send-message sender-id message
     report fulfill-assigned-contract contract-id
  ]
  
  report false
end

to-report analyze-votes-yes-no 
  ;; Analyze the votes cast and make a decision about whether to order a new bus
  let yes 0
  let total 0
  
  ; In case only the mediator bus is present
  if length received-votes = 0
  [
     report true
  ]
  
  foreach received-votes
  [ 
     if ? > 0
     [
        set yes yes + 1
     ]
     set total total + 1
  ]
  
  if yes / total > 0.5
  [
    report true
  ]
  
  report false
end

to-report analyze-votes-preference
  ;; Analyze the votes and make a decision based on konsensus 
  let votes table:make
  let total length received-votes
  table:put votes 0 0
  table:put votes 1 0
  table:put votes 2 0
  table:put votes 3 0
  
  show (word "Votes: " received-votes)
  
  if length received-votes = 0
  [
     report 1
  ]
  
  ; Count votes
  foreach received-votes
  [
     table:put votes ? (table:get votes ?) + 1
  ]
  
  
  if table:get votes 3 / total > 0.5
  [
     report 3
  ]
  
  if (table:get votes 3 + table:get votes 2) / total > 0.5
  [
     report 2
  ]
  
  if (table:get votes 3 + table:get votes 2 + table:get votes 1) / total > 0.5
  [
     report 1
  ]
  
  report 0
end

to order-bus [ bus-type ]
  ;; Order a new bus
  add-bus bus-type
end

to-report get-utilization
  if length bus_passengers = 0
  [
     report 0
  ]
  
  report get-capacity / length bus_passengers
end